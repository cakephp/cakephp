name: CakePHP CI

on:
  push:
    branches:
      - master
      - '4.next'
  pull_request:
    branches:
      - '*'

jobs:
  testsuite:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        php-version: ['7.2', '7.4']
        db-type: [sqlite, mysql, pgsql]
    name: PHP ${{ matrix.php-version }} & ${{ matrix.db-type }}

    services:
      redis:
        image: redis
        ports:
          - 6379/tcp
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Setup PHP
      uses: shivammathur/setup-php@v1
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, intl, apcu, pdo_${{ matrix.db-type }}
        ini-values: apc.enable_cli = 1
        coverage: pcov

    - name: Install packages
      run: |
        # memcached installation fails without updating packages.
        sudo apt update
        sudo apt install memcached

        sudo locale-gen da_DK.UTF-8
        sudo locale-gen de_DE.UTF-8

    - name: composer install
      run: composer install

    - name: Configure PHPUnit matcher
      if: matrix.php-version == '7.4' && matrix.db-type == 'mysql'
      uses: mheap/phpunit-matcher-action@master

    - name: Run PHPUnit
      env:
        REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      run: |
        if [ ${{ matrix.db-type }} == 'mysql' ]; then mysql -u root -proot -e 'CREATE DATABASE cakephp_test;'; fi

        if [[ ${{ matrix.db-type }} == 'sqlite' ]]; then export DB_DSN='sqlite:///:memory:'; fi
        if [[ ${{ matrix.db-type }} == 'mysql' ]]; then export DB_DSN='mysql://root:root@127.0.0.1/cakephp_test?init[]=SET sql_mode = "STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"'; fi
        if [[ ${{ matrix.db-type }} == 'pgsql' ]]; then export DB_DSN='postgres://postgres:postgres@127.0.0.1/postgres'; fi

        if [[ ${{ matrix.php-version }} == '7.2' ]]; then
          vendor/bin/phpunit
        elif [[ ${{ matrix.php-version }} == '7.4' && ${{ matrix.db-type }} == 'mysql' ]]; then
          vendor/bin/phpunit --teamcity --verbose
        else
          vendor/bin/phpunit --verbose
        fi

  testsuite-windows:
    runs-on: windows-2019
    name: PHP 7 && MSSQL

    services:
      redis:
        image: redis
        ports:
          - 6379/tcp
      mssql:
        image: microsoft/mssql-server-windows-express
        ports:
          - 1433:1433
        env:
          - sa_password: Password12!
          - ACCEPT_EULA: Y

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Setup PHP
      uses: shivammathur/setup-php@v1
      with:
        php-version: '7.2'
        extensions: mbstring, intl, apcu, pdo_sqlsrv
        ini-values: apc.enable_cli = 1
        coverage: none

    - name: Setup SQLServer
      run: |
        sqlcmd -S localhost,1433 -U sa -P Password12! -Q "create database cakephp;"

    - name: composer install
      run: composer install

    - name: Run PHPUnit
      env:
        REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
        DB_DSN: 'sqlserver://sa:Password12!@localhost/cakephp?MultipleActiveResultSets=false'
      run: |
          vendor/bin/phpunit

  coding-standard:
    name: Coding Standard
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Setup PHP
      uses: shivammathur/setup-php@v1
      with:
        php-version: '7.2'
        extensions: mbstring, intl, apcu
        coverage: none

    - name: composer install
      run: composer install

    - name: Run PHP CodeSniffer
      run: composer cs-check

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Setup PHP
      uses: shivammathur/setup-php@v1
      with:
        php-version: '7.2'
        extensions: mbstring, intl, apcu
        coverage: none

    - name: composer install
      run: composer stan-setup

    - name: Run psalm
      run: vendor/bin/psalm.phar --show-info=false --output-format=github

    - name: Run phpstan
      run: vendor/bin/phpstan.phar analyse --no-progress src/
