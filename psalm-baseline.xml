<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.24.0@462c80e31c34e58cc4f750c656be3927e80e550e">
  <file src="src/Cache/Engine/FileEngine.php">
    <TooManyTemplateParams>
      <code><![CDATA[$iterator]]></code>
    </TooManyTemplateParams>
  </file>
  <file src="src/Cache/Engine/RedisEngine.php">
    <InvalidCast>
      <code><![CDATA[$this->_Redis->del($key)]]></code>
      <code><![CDATA[$this->_Redis->del($key)]]></code>
      <code><![CDATA[$this->_Redis->unlink($key)]]></code>
      <code><![CDATA[$this->_Redis->unlink($key)]]></code>
    </InvalidCast>
    <InvalidReturnStatement>
      <code><![CDATA[$this->_Redis->set($key, $value)]]></code>
      <code><![CDATA[$this->_Redis->setEx($key, $duration, $value)]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[bool]]></code>
      <code><![CDATA[int|false]]></code>
      <code><![CDATA[int|false]]></code>
    </InvalidReturnType>
  </file>
  <file src="src/Collection/CollectionTrait.php">
    <TooManyArguments>
      <code><![CDATA[$callback($value, $key, $items)]]></code>
    </TooManyArguments>
  </file>
  <file src="src/Controller/ControllerFactory.php">
    <UndefinedMethod>
      <code><![CDATA[getName]]></code>
    </UndefinedMethod>
  </file>
  <file src="src/Core/PluginConfig.php">
    <RedundantCondition>
      <code><![CDATA[is_array($pluginLoadConfig)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Event/EventDispatcherTrait.php">
    <MoreSpecificImplementedParamType>
      <code><![CDATA[$subject]]></code>
    </MoreSpecificImplementedParamType>
  </file>
  <file src="src/Event/EventManager.php">
    <InvalidArgument>
      <code><![CDATA[_callListener]]></code>
      <code><![CDATA[addEventToList]]></code>
      <code><![CDATA[addEventToList]]></code>
    </InvalidArgument>
    <InvalidReturnStatement>
      <code><![CDATA[$event]]></code>
      <code><![CDATA[$event]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[EventInterface]]></code>
    </InvalidReturnType>
  </file>
  <file src="src/Http/BaseApplication.php">
    <UndefinedInterfaceMethod>
      <code><![CDATA[events]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/I18n/Date.php">
    <ImpureFunctionCall>
      <code><![CDATA[call_user_func(static::$_jsonEncodeFormat, $this)]]></code>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
    </ImpureFunctionCall>
    <ImpureMethodCall>
      <code><![CDATA[_formatObject]]></code>
      <code><![CDATA[dateAgoInWords]]></code>
      <code><![CDATA[diffFormatter]]></code>
      <code><![CDATA[getDefaultLocale]]></code>
    </ImpureMethodCall>
    <ImpureStaticProperty>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
      <code><![CDATA[static::$_toStringFormat]]></code>
      <code><![CDATA[static::$niceFormat]]></code>
    </ImpureStaticProperty>
  </file>
  <file src="src/I18n/DateTime.php">
    <ImpureFunctionCall>
      <code><![CDATA[call_user_func(static::$_jsonEncodeFormat, $this)]]></code>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
    </ImpureFunctionCall>
    <ImpureMethodCall>
      <code><![CDATA[_formatObject]]></code>
      <code><![CDATA[diffFormatter]]></code>
      <code><![CDATA[getDefaultLocale]]></code>
      <code><![CDATA[timeAgoInWords]]></code>
    </ImpureMethodCall>
    <ImpureStaticProperty>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
      <code><![CDATA[static::$_toStringFormat]]></code>
      <code><![CDATA[static::$niceFormat]]></code>
    </ImpureStaticProperty>
  </file>
  <file src="src/I18n/Time.php">
    <ImpureFunctionCall>
      <code><![CDATA[call_user_func(static::$_jsonEncodeFormat, $this)]]></code>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
    </ImpureFunctionCall>
    <ImpureMethodCall>
      <code><![CDATA[_formatObject]]></code>
      <code><![CDATA[getDefaultLocale]]></code>
      <code><![CDATA[toNative]]></code>
    </ImpureMethodCall>
    <ImpureStaticProperty>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
      <code><![CDATA[static::$_jsonEncodeFormat]]></code>
      <code><![CDATA[static::$_toStringFormat]]></code>
      <code><![CDATA[static::$niceFormat]]></code>
    </ImpureStaticProperty>
  </file>
  <file src="src/TestSuite/Constraint/EventFired.php">
    <InternalClass>
      <code><![CDATA[new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )]]></code>
    </InternalMethod>
  </file>
  <file src="src/TestSuite/Constraint/EventFiredWith.php">
    <InternalClass>
      <code><![CDATA[new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )]]></code>
      <code><![CDATA[new AssertionFailedError(sprintf(
                'Event `%s` was fired %d times, cannot make data assertion',
                $other,
                count($events)
            ))]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )]]></code>
      <code><![CDATA[new AssertionFailedError(sprintf(
                'Event `%s` was fired %d times, cannot make data assertion',
                $other,
                count($events)
            ))]]></code>
    </InternalMethod>
  </file>
  <file src="src/TestSuite/Constraint/Response/ResponseBase.php">
    <InternalClass>
      <code><![CDATA[new AssertionFailedError('No response set, cannot assert content.')]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new AssertionFailedError('No response set, cannot assert content.')]]></code>
    </InternalMethod>
  </file>
  <file src="src/TestSuite/Constraint/Session/FlashParamEquals.php">
    <InternalClass>
      <code><![CDATA[new AssertionFailedError($message)]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new AssertionFailedError($message)]]></code>
    </InternalMethod>
  </file>
  <file src="src/TestSuite/TestCase.php">
    <UndefinedVariable>
      <code><![CDATA[$previousHandler]]></code>
    </UndefinedVariable>
  </file>
  <file src="src/Utility/Filesystem.php">
    <TooManyTemplateParams>
      <code><![CDATA[$iterator]]></code>
      <code><![CDATA[$iterator]]></code>
    </TooManyTemplateParams>
  </file>
  <file src="src/Utility/Hash.php">
    <InvalidReturnStatement>
      <code><![CDATA[$data]]></code>
      <code><![CDATA[$data]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[(T is array ? array : \ArrayAccess)]]></code>
      <code><![CDATA[(T is array ? array : \ArrayAccess)]]></code>
    </InvalidReturnType>
  </file>
  <file src="src/Validation/Validation.php">
    <RedundantCondition>
      <code><![CDATA[$check instanceof $enumClassName &&
            $check instanceof BackedEnum]]></code>
    </RedundantCondition>
  </file>
  <file src="src/View/Exception/MissingCellTemplateException.php">
    <ImplementedReturnTypeMismatch>
      <code><![CDATA[array{name: string, file: string, paths: list<string>}]]></code>
    </ImplementedReturnTypeMismatch>
  </file>
  <file src="src/View/Helper/PaginatorHelper.php">
    <TypeDoesNotContainType>
      <code><![CDATA[empty($this->_config['options']['url'])]]></code>
    </TypeDoesNotContainType>
  </file>
</files>
